
*****************************************************
Summary
-------
Generated at: 2025-02-07T11:51:03-03:00

Notes: 0
Binaries: 0
Archives: 0
Standards: 11

Apache Licensed: 0
Generated Documents: 0

JavaDocs are generated, thus a license header is optional.
Generated files do not require license headers.

11 Unknown Licenses

*****************************************************

Files with unapproved licenses:

  /home/gabriel/Projects/flink-env/docker/data-generator/docker-entrypoint.sh
  /home/gabriel/Projects/flink-env/docker/data-generator/Dockerfile
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/DataGenerator.java
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao.csv
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao_mili.csv
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSupplier.java
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeAr.java
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSerializer.java
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Producer.java
  /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Throttler.java
  /home/gabriel/Projects/flink-env/docker/data-generator/pom.xml

*****************************************************

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require any license headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc. will be marked N
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/docker-entrypoint.sh
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/Dockerfile
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/DataGenerator.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao.csv
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao_mili.csv
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSupplier.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeAr.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSerializer.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Producer.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Throttler.java
 !????? /home/gabriel/Projects/flink-env/docker/data-generator/pom.xml
 
*****************************************************

 Printing headers for text files without a valid license header...
 
=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/docker-entrypoint.sh
=====================================================
#!/bin/bash

java -classpath /opt/data-generator.jar org.apache.flink.playground.datagen.DataGenerator

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/Dockerfile
=====================================================
FROM maven:3.6-jdk-8-slim AS builder

# Get data producer code and compile it
COPY ./src /opt/data-producer/src
COPY ./pom.xml /opt/data-producer/pom.xml

RUN cd /opt/data-producer; \
    mvn spotless:apply; \
    mvn clean install -Drat.numUnapprovedLicenses=100

FROM openjdk:8-jre

COPY --from=builder /opt/data-producer/target/data-generator-*.jar /opt/data-generator.jar

RUN cd /opt

COPY docker-entrypoint.sh /
COPY ./src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao_mili.csv /

ENTRYPOINT ["/docker-entrypoint.sh"]

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/DataGenerator.java
=====================================================
package org.apache.flink.sensor.datagen;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** A basic data generator for continuously writing data into a Kafka topic. */
public class DataGenerator {

  private static final Logger LOG = LoggerFactory.getLogger(DataGenerator.class);

  private static final String KAFKA = "localhost:9094"; //outside = localhost:9094 //innside container = "kafka:9092"

  private static final String TOPIC = "air"; //old = "transactions";

  public static void main(String[] args) {
    Producer producer = new Producer(KAFKA, TOPIC);

    Runtime.getRuntime()
        .addShutdownHook(
            new Thread(
                () -> {
                  LOG.info("Shutting down");
                  producer.close();
                }));

    producer.run();
  }
}

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao.csv
=====================================================
Data,Hora,MP10(Partículas Inaláveis) - µg/m3,MP2.5(Partículas Inaláveis Finas) - µg/m3,O3(Ozônio) - µg/m3,CO(Monóxido de Carbono) - ppm,NO2(Dióxido de Nitrogênio) - µg/m3
01/01/2022,01:00,29,22,24,0.6,0
01/01/2022,02:00,31,29,42,0.4,6
01/01/2022,03:00,7,8,33,0.4,9
01/01/2022,04:00,14,11,27,0.5,9
01/01/2022,05:00,12,8,0,0.7,13
01/01/2022,06:00,16,7,16,0.6,12
01/01/2022,07:00,18,9,18,0.5,9
01/01/2022,08:00,15,2,23,0.4,7
01/01/2022,09:00,8,1,34,0.3,4
01/01/2022,10:00,3,4,38,0.3,2
01/01/2022,11:00,2,3,42,0.3,2
01/01/2022,12:00,3,4,48,0.3,2
01/01/2022,13:00,4,4,54,0.3,2
01/01/2022,14:00,9,3,58,0.3,2
01/01/2022,15:00,13,5,66,0.2,2
01/01/2022,16:00,12,9,60,0.2,2
01/01/2022,17:00,11,6,56,0.3,3
01/01/2022,18:00,1,7,53,0.3,3
01/01/2022,19:00,6,5,50,0.3,4
01/01/2022,20:00,21,15,48,0.3,5
01/01/2022,21:00,5,4,42,0.3,6
01/01/2022,22:00,5,3,43,0.3,5
01/01/2022,23:00,8,4,45,0.3,4
01/01/2022,24:00:00,7,6,46,0.2,3
02/01/2022,01:00,5,3,44,0.2,0
02/01/2022,02:00,5,4,44,0.2,3
02/01/2022,03:00,8,7,38,0.3,4
02/01/2022,04:00,3,3,43,0.2,2
02/01/2022,05:00,9,4,0,0.2,3
02/01/2022,06:00,12,2,28,0.3,6
02/01/2022,07:00,7,4,34,0.3,5
02/01/2022,08:00,4,4,34,0.3,4
02/01/2022,09:00,4,1,35,0.3,3
02/01/2022,10:00,0,0,41,0.3,2
02/01/2022,11:00,7,6,43,0.3,2
02/01/2022,12:00,19,13,41,0.3,2
02/01/2022,13:00,4,3,45,0.3,2
02/01/2022,14:00,4,1,49,0.3,2
02/01/2022,15:00,5,2,50,0.3,2
02/01/2022,16:00,7,7,53,0.3,2
02/01/2022,17:00,11,15,44,0.3,4
02/01/2022,18:00,6,4,34,0.4,7
02/01/2022,19:00,18,10,33,0.4,8
02/01/2022,20:00,14,8,34,0.3,5
02/01/2022,21:00,8,1,26,0.4,9
02/01/2022,22:00,9,6,19,0.4,12
02/01/2022,23:00,3,3,18,0.4,12
02/01/2022,24:00:00,15,4,17,0.4,11
03/01/2022,01:00,9,9,16,0.6,0

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao_mili.csv
=====================================================
Data,Hora,MP10(Partículas Inaláveis) - µg/m3,MP2.5(Partículas Inaláveis Finas) - µg/m3,O3(Ozônio) - µg/m3,CO(Monóxido de Carbono) - ppm,NO2(Dióxido de Nitrogênio) - µg/m3,timestamp
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:00.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:00.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:01.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:01.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:02.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:02.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:03.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:03.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:04.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:04.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:05.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:05.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:06.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:06.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:07.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:07.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:08.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:08.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:09.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:09.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:10.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:10.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:11.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:11.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:12.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:12.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:13.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:13.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:14.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:14.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:15.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:15.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:16.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:16.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:17.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:17.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:18.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:18.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:19.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:19.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:20.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:20.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:21.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:21.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:22.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:22.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:23.000
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:23.500
01/01/2022,01:00,29,22,24,0.6,0,2022-01-01 01:00:24.000

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSupplier.java
=====================================================
package org.apache.flink.sensor.datagen.model;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.Random;
import java.util.function.Supplier;
import java.util.stream.Stream;

public class QualidadeArSupplier implements Supplier<QualidadeAr> {

    private final Iterator<QualidadeAr> iterator;
    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private final DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    private static final String filePathLocal = "/home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/dados_cetesb_ribeirao_mili.csv";
    private static final String filePathDocker = "/dados_cetesb_ribeirao_mili.csv";
    
    public QualidadeArSupplier() {
        try {
            File file = new File(filePathLocal);
            if(!file.exists()){
                file = new File(filePathDocker);
            }
            BufferedReader reader = new BufferedReader(new FileReader(file));
            Stream<String> lines = reader.lines().skip(1); // Skip header line
            iterator = lines.map(this::parseLine).iterator();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private QualidadeAr parseLine(String line) {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter dateFormatterDate = DateTimeFormatter.ofPattern("dd/MM/YYYY");
        String event_transmited_date = now.format(dateFormatterDate);

        DateTimeFormatter dateFormatterTime = DateTimeFormatter.ofPattern("HH:mm:ss.SSSS");
        String event_transmited_time = now.format(dateFormatterTime);

        String[] fields = line.split(",");
        QualidadeAr dados = new QualidadeAr();
        dados.data = fields[0];
        dados.hora = fields[1];
        dados.particulasInalaveisMp10 = fields[2];
        dados.particulasInalaveisFinasMp25 = fields[3];

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeAr.java
=====================================================
package org.apache.flink.sensor.datagen.model;


public class QualidadeAr {
    public String data;
    public String hora;
    public String particulasInalaveisMp10;
    public String particulasInalaveisFinasMp25;
    public String ozonio;
    public String monoxidoDeCarbono;
    public String dioxidoDeNitrogenio;
    public String event_transmited_date;
    public String event_transmited_time;
    public String timestamp; //only with the new data
}

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/model/QualidadeArSerializer.java
=====================================================
package org.apache.flink.sensor.datagen.model;

import java.util.Map;
import org.apache.kafka.common.serialization.Serializer;
import java.time.format.DateTimeFormatter;

public class QualidadeArSerializer implements Serializer<QualidadeAr> {

    private static final DateTimeFormatter formatter =
        DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss");
  
    @Override
    public void configure(Map<String, ?> configs, boolean isKey) {}
  
    @Override
    public byte[] serialize(String topic, QualidadeAr dadosQualidadeAr) {
        String csv =
            String.format(
            "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
            dadosQualidadeAr.data,
            dadosQualidadeAr.hora,
            dadosQualidadeAr.particulasInalaveisMp10,
            dadosQualidadeAr.particulasInalaveisFinasMp25,
            dadosQualidadeAr.ozonio,
            dadosQualidadeAr.monoxidoDeCarbono,
            dadosQualidadeAr.dioxidoDeNitrogenio,
            dadosQualidadeAr.timestamp,
            dadosQualidadeAr.event_transmited_date,
            dadosQualidadeAr.event_transmited_time

        );
  
      return csv.getBytes();
    }
  
    @Override
    public void close() {}
  }

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Producer.java
=====================================================
package org.apache.flink.sensor.datagen;

import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Properties;

import org.apache.flink.sensor.datagen.model.QualidadeAr;
import org.apache.flink.sensor.datagen.model.QualidadeArSupplier;
import org.apache.flink.sensor.datagen.model.QualidadeArSerializer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.LongSerializer;

/** Generates CSV transaction records at a rate */
public class Producer implements Runnable, AutoCloseable {

  private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss");

  private volatile boolean isRunning;

  private final String brokers;

  private final String topic;

  private static long lastSendTime = System.currentTimeMillis();

  private static final long TIME_INTERVAL_RECORD_SEND = 10000;  // 5 seconds (MILISECONDS)

  private static final int PARTICULAS_INALAVEIS_MP10_THRESHOLD = 50;

  private static final int PARTICULAS_INALAVEIS_FINAS_MP25_THRESHOLD = 25;

  private static final int OZONIO_O3_THRESHOLD = 100;

  private static final int MONOXIDO_DE_CARBONO_THRESHOLD = 9;

  private static final int DIOXIDO_DE_NITROGENIO_NO2_THRESHOLD = 200;

  private static final int SO2_THRESHOLD = 20;

  private static final boolean FILTERED_DATA = false;

  public Producer(String brokers, String topic) {
    this.brokers = brokers;
    this.topic = topic;
    this.isRunning = true;
  }

  @Override

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/src/main/java/org/apache/flink/sensor/datagen/Throttler.java
=====================================================
package org.apache.flink.sensor.datagen;

/** A data throttler that controls the rate at which data is written out to Kafka. */
final class Throttler {

  private final long throttleBatchSize;
  private final long nanosPerBatch;

  private long endOfNextBatchNanos;
  private int currentBatch;

  Throttler(long maxRecordsPerSecond) {
    if (maxRecordsPerSecond == -1) {
      // unlimited speed
      throttleBatchSize = -1;
      nanosPerBatch = 0;
      endOfNextBatchNanos = System.nanoTime() + nanosPerBatch;
      currentBatch = 0;
      return;
    }
    final float ratePerSubtask = (float) maxRecordsPerSecond;

    if (ratePerSubtask >= 10000) {
      // high rates: all throttling in intervals of 2ms
      throttleBatchSize = (int) ratePerSubtask / 500;
      nanosPerBatch = 2_000_000L;
    } else {
      throttleBatchSize = ((int) (ratePerSubtask / 20)) + 1;
      nanosPerBatch = ((int) (1_000_000_000L / ratePerSubtask)) * throttleBatchSize;
    }
    this.endOfNextBatchNanos = System.nanoTime() + nanosPerBatch;
    this.currentBatch = 0;
  }

  void throttle() throws InterruptedException {
    if (throttleBatchSize == -1) {
      return;
    }
    if (++currentBatch != throttleBatchSize) {
      return;
    }
    currentBatch = 0;

    final long now = System.nanoTime();
    final int millisRemaining = (int) ((endOfNextBatchNanos - now) / 1_000_000);

    if (millisRemaining > 0) {
      endOfNextBatchNanos += nanosPerBatch;
      Thread.sleep(millisRemaining);
    } else {

=====================================================
== File: /home/gabriel/Projects/flink-env/docker/data-generator/pom.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.apache.flink</groupId>
    <artifactId>data-generator</artifactId>
    <version>1.0.0</version>

    <url>http://flink.apache.org</url>
    <inceptionYear>2014</inceptionYear>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <kafka.version>2.2.0</kafka.version>
        <avro.version>1.8.2</avro.version>
        <java.version>1.8</java.version>
        <java.version>1.8</java.version>
        <spotless-maven-plugin.version>1.20.0</spotless-maven-plugin.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>${kafka.version}</version>
        </dependency>
    
      <dependency>
        <groupId>com.jcraft</groupId>
        <artifactId>jsch</artifactId>
        <version>0.1.55</version>
      </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Java Compiler -->
            <plugin>
